Dictionaries can store a limitless amount of data, they can  be called upon, and defined to anything you wish.

Terms to know
Dictionary- a collection of key-value pairs
Key-Value Pairs- this is a key connected to a value 

Dictionaries = {call_back : Variable/value, call_back: Variable} 
ex. alien_0 = {'color':'green', 'points':5}

It is possible to add more key-value pairs to a Dictionary by using brackets 
ex. alien_0['y_position'] = 25

To make an empty Dictionary, just add braces {}
ex. dictionary = {}

To Modify the values of your dictionary you plug  in the name the key and a new value 
ex. alien_0['color'] = 'yellow'

If you wish to remove key-value pairs you add a del and then tell it which one 
ex. del alien_0['points']

when using a dictionary for similar items you can add the brace then enter and indent followed by your key-value pair and a comma, end it with a brace 
ex. 
fav_language = {
        'jen':'python',
        'sarah':'ruby',
        }

When looping through a dictionary, you can store the key and value as two seperate variable and then print those out 
ex. for key, value in user_0.items():
        print("\nKey: " + key) # \n is a newline
        print("Value: " + value)
        
keys() is a great way to create a list of your keys
ex. for name in favorite_languages.keys():
        print(name.title())

sorted() creates a list in alphabetical order 
ex. for name in sorted(favorite_languages.keys()):

values() works the same way as keys()

if you wrap set() around a dictionary you get a non repetitive list, so if you had 12 sets of 'first' you would only get a list with one

Nesting is where you make a dictionary filled with dictionaries

using .range(#iteger) wil cause a loop to run a certain amount of times 


